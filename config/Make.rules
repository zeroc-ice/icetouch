# **********************************************************************
#
# Copyright (c) 2003-2017 ZeroC, Inc. All rights reserved.
#
# This copy of Ice Touch is licensed to you under the terms described
# in the ICE_LICENSE file included in this distribution.
#
# **********************************************************************

#
# Select an installation base directory. The directory will be created
# if it does not exist.
#
prefix		?= /opt/IceTouch-$(VERSION)

#
# Xcode root directory. If you have several Xcode versions installed,
# choose the version you want to use to build Ice Touch. The default
# is the one returned by "xcode-select -print-path".
#
#XCODE_PATH   	= /Applications/Xcode.app

#
# If MCPP is not installed in a standard location where the compiler
# can find it, set MCPP_HOME to the Mcpp installation directory.
#
#MCPP_HOME	?= /opt/mcpp

#
# Define OPTIMIZE_SIZE as yes if you want to build with minimal size.
# Define OPTIMIZE_SPEED as yes if you want to build with maximum speed.
#
# These options are mutually exclusive. If neither is set, Ice Touch
# is built with debug information.
#
#OPTIMIZE_SIZE	= yes
#OPTIMIZE_SPEED	= yes

#
# If you don't define COMPILE_FOR_IPHONE, COMPILE_FOR_IPHONE_SIMULATOR or
# COMPILE_FOR_OSX below, the default is to build for all the platforms.
#

#
# Compile the Xcode SDK for the iPhone platform
#
#COMPILE_FOR_IPHONE		= yes

#
# Compile the Xcode SDK for the iPhone simulator platform
#
#COMPILE_FOR_IPHONE_SIMULATOR 	= yes

#
# Compile the Xcode SDK for OS X platform
#
#COMPILE_FOR_OSX 	        = yes

#
# The minimum SDK version supported by targets, the default is 7.1 for iOS and
# 10.9 for OS X.
#
#OSX_TARGET_MIN_SDK_VERSION 	= 10.9
#IOS_TARGET_MIN_SDK_VERSION 	= 7.1

#
# The build architectures. The default is to build fat binaries with all
# supported architectures for release builds, and single arch binaries
# for debug builds. The list of supported architecturs depends of the
# target platform.
#
# OS X:
#
#ARCHFLAGS            = -arch x86_64
#
# iPhone:
#
#ARCHFLAGS            = -arch armv7 -arch armv7s -arch arm64
#
# iPhone Simulator:
#
#ARCHFLAGS            = -arch i386 -arch x86_64


# ----------------------------------------------------------------------
# Don't change anything below this line!
# ----------------------------------------------------------------------

ifeq ($(ice_language),)
ifneq ($(strip $(foreach s,src/objective-c test/objective-c,$(findstring $(s),$(CURDIR)))),)
ice_language 	= objective-c
else
ice_language 	= cpp
endif
endif

VERSION		= 3.6.4

INSTALL		= cp -fp
INSTALL_PROGRAM	= ${INSTALL}
INSTALL_LIBRARY	= ${INSTALL}
INSTALL_DATA	= ${INSTALL}

ifeq ($(ICE_HOME),)
ice_dir := $(top_srcdir)/ice
else
ice_dir	:= $(ICE_HOME)
endif

ifeq ($(OPTIMIZE_SPEED),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE_SIZE),yes)
    OPTIMIZE		= yes
else ifeq ($(OPTIMIZE),yes)
    OPTIMIZE_SPEED	= yes
endif

ifeq ($(IOS_TARGET_MIN_SDK_VERSION),)
     IOS_TARGET_MIN_SDK_VERSION = 7.1
endif

ifeq ($(OSX_TARGET_MIN_SDK_VERSION),)
    OSX_TARGET_MIN_SDK_VERSION = 10.9
endif

ifneq ($(XCODE_PATH),)
    export DEVELOPER_DIR := $(XCODE_PATH)/Contents/Developer
endif

ifeq ($(COMPILE_TRANSLATORS),yes)
    PLATFORM_NAME = macosx
else ifeq ($(COMPILE_FOR_IPHONE_SIMULATOR),yes)
    PLATFORM_NAME = iphonesimulator
else ifeq ($(COMPILE_FOR_IPHONE),yes)
    PLATFORM_NAME = iphoneos
else
    PLATFORM_NAME = macosx
endif

slicedir 	= $(ice_dir)/slice
ifeq ($(USE_BIN_DIST),yes)
    ifeq ($(ICE_TOUCH_HOME),)
        ICE_TOUCH_HOME = /usr/local
    endif
    bindir	= $(ICE_TOUCH_HOME)/lib/IceTouch/$(sdksubdir)/bin
    sdkdir	= $(ICE_TOUCH_HOME)/lib/IceTouch/$(sdksubdir)/$(PLATFORM_NAME).sdk
else
    bindir	= $(top_srcdir)/lib/IceTouch/$(sdksubdir)/bin
    sdkdir	= $(top_srcdir)/lib/IceTouch/$(sdksubdir)/$(PLATFORM_NAME).sdk
endif
sdksubdir 	= $(if $(ice_language:cpp=),ObjC,Cpp)
libdir		= $(sdkdir)/usr/lib
ifeq ($(COMPILE_TRANSLATORS),yes)
    includedir	= $(ice_dir)/cpp/include
else
    includedir	= $(sdkdir)/usr/include
endif

ifeq ($(PLATFORM_NAME),iphoneos)
    SDK_NAME = iphoneos$(IOS_SDK_VERSION)
    ifeq ($(ARCHFLAGS),)
        ifeq ($(OPTIMIZE),yes)
            ARCHFLAGS = -arch armv7 -arch armv7s -arch arm64
        else
            ARCHFLAGS = -arch armv7 -arch arm64
        endif
    endif
else ifeq ($(PLATFORM_NAME),iphonesimulator)
    SDK_NAME = iphonesimulator$(IOS_SDK_VERSION)
    ifeq ($(ARCHFLAGS),)
        ARCHFLAGS = -arch i386 -arch x86_64
    endif
else
    SDK_NAME = macosx$(OSX_SDK_VERSION)
    ifeq ($(ARCHFLAGS),)
        ARCHFLAGS = -arch x86_64
    endif
endif

ifeq ($(COMPILE_TRANSLATORS),)
    CC     = xcrun -sdk $(SDK_NAME) clang
    CXX    = xcrun -sdk $(SDK_NAME) clang++
else
    # No SDK when building the translators. When specifying an SDK,
    # Xcode doesn't use the headers/libraries from /usr or /usr/local.
    CC     = xcrun clang
    CXX    = xcrun clang++
endif

OPT_FLAGS =
ifeq ($(OPTIMIZE_SPEED),yes)
    OPT_FLAGS	= -O2
endif
ifeq ($(OPTIMIZE_SIZE),yes)
    OPT_FLAGS 	= -Oz
endif

COMPFLAGS = -Wall
ifeq ($(OPTIMIZE),yes)
    COMPFLAGS	:= $(OPT_FLAGS) -DNDEBUG $(COMPFLAGS)
else
    COMPFLAGS	:= -g $(COMPFLAGS)
endif
COMPFLAGS += $(ARCHFLAGS)

OBJDIR = $(PLATFORM_NAME)

ifeq ($(PLATFORM_NAME),iphoneos)
    CPPPLATFORMFLAGS   += -miphoneos-version-min=$(IOS_TARGET_MIN_SDK_VERSION)
else ifeq ($(PLATFORM_NAME),iphonesimulator)
    CPPPLATFORMFLAGS   += -mios-simulator-version-min=$(IOS_TARGET_MIN_SDK_VERSION)
else
    CPPPLATFORMFLAGS   += -mmacosx-version-min=$(OSX_TARGET_MIN_SDK_VERSION)
endif

LDPLATFORMFLAGS	 := $(CPPPLATFORMFLAGS)
CPPPLATFORMFLAGS += -pthread -fvisibility=hidden

ifneq ($(shell $(CXX) --help | grep fembed-bitcode),)
ifneq ($(PLATFORM_NAME),macosx)
    CPPPLATFORMFLAGS   += -fembed-bitcode
endif
endif

ICECPPFLAGS	= -I$(slicedir)
SLICE2OBJCFLAGS	= $(ICECPPFLAGS)
SLICE2CPPFLAGS	= $(ICECPPFLAGS)
CPPFLAGS	= -I$(includedir) $(CPPPLATFORMFLAGS)

SLICE2OBJC	= $(bindir)/slice2objc
SLICE2CPP  	= $(bindir)/slice2cpp

mklibname	= lib$(1).a
mklibfilename = lib$(1).a
mklib		= if [ ! -d "$(dir $1)" ]; then mkdir -p $(dir $1); fi; \
	    	  echo "libtool -static -o $1 $2"; \
		  rm -f $(1); \
		  libtool -no_warning_for_no_symbols -static -o $(1) $(2)

mklibtargets	= $(3)

installlib	= $(INSTALL) $(2)/$(5) $(1); \
		  chmod a+rx $(1)/$(5)

installdata	= $(INSTALL_DATA) $(1) $(2); \
		  chmod a+r $(2)/$(notdir $(1))

installprogram	= $(INSTALL_PROGRAM) $(1) $(2); \
		  chmod a+rx $(2)/$(notdir $(1))

mkdir		= mkdir $(1) ; \
		  chmod a+rx $(1)

#
# mkheader ORIG,DEST
#
mkheader = echo "cp $1 $2"; \
	   mkdir -p $(dir $2); \
	   cp $1 $2; \
	   chmod a+r $2; \

#
# mkobj FILE.[cpp|m|mm],FILE.o,CPPFLAGS,COMPILER
#
mkobj = echo "$(if $4,$4,$(CXX)) $(if $3,$3,$(CPPFLAGS)) $(COMPFLAGS) -c $1 -o $2"; \
	if [ -n "$(dir $2)" -a ! -d "$(dir $2)" ]; then mkdir -p $(dir $2); fi; \
	$(if $4,$4,$(CXX)) -c $1 -o $2 $(if $3,$3,$(CPPFLAGS)) $(COMPFLAGS) || exit 1; \
	mkdir -p $(dependdir); \
	$(CXX) -DMAKEDEPEND -MM -MT $2 $(if $3,$3,$(CPPFLAGS)) $(if $(PLATFORM_NAME:iphoneos=),,-arch armv7) \
	-c $1 > $(dependdir)/$(notdir $(2:.o=.d)) \

#
# mkslice FILE.ice,STEM,[HEADERDIR,OUTPUTDIR,FLAGS,TRANSLATOR]
#
mkslice = echo "$6 $5 $(if $4,--output-dir $4,) $1"; \
	  if [ -n "$3" -a ! -d "$3" ]; then mkdir -p $3; fi; \
	  if [ -n "$4" -a ! -d "$4" ]; then mkdir -p $4; fi; \
	  $6 $5 $(if $4,--output-dir $4,) $1 || exit 1; \
	  if [ -n "$3" ]; then mv $(if $4,$4/$2.h,$2.h) $3/; fi; \
	  if [ ! -d $(dependdir) ]; then mkdir -p $(dependdir); fi; \
	  if [ -n "$3" ]; \
	  then \
	      echo $3; \
	      $6 $5 --depend $1 | sed 's|\(.*: \\\)|'$3'/\1|' > $(dependdir)/$2.ice.d; \
	  else \
	      $6 $5 --depend $1 > $(dependdir)/$2.ice.d; \
          fi
all::

LDFLAGS	= $(LDPLATFORMFLAGS) $(COMPFLAGS) $(if $(ice_language:cpp=),-ObjC,)

ifeq ($(PLATFORM_NAME),macosx)
ICE_OS_LIBS 	= -framework Security -framework Foundation -lbz2 -liconv
else
ICE_OS_LIBS 	= -framework UIKit -framework CFNetwork -framework Security -framework Foundation -liconv
endif

MCPP_LIBS 	= $(if $(MCPP_HOME),-L$(MCPP_HOME)/lib) -lmcpp

LIBS            = -L$(libdir) $(if $(ice_language:cpp=),-lIceObjC,-lIce) $(ICE_OS_LIBS)
TEST_LIBS	= -L$(top_srcdir)/test/lib -lTestCommon $(LIBS)

EVERYTHING		= all depend clean install
EVERYTHING_EXCEPT_ALL   = depend clean install

.SUFFIXES:
.SUFFIXES:	.m .mm .cpp .o

dependdir 	= $(OBJDIR)/.depend
cppdir	  	= $(ice_dir)/cpp
objcdir	  	= $(ice_dir)/objective-c
langdir	  	= $(ice_dir)/$(ice_language)
langext		= $(if $(ice_language:cpp=),m,cpp)
langsubdir	= $(if $(ice_language:cpp=),objective-c,cpp)

ifneq ($(HEADERS),)
HEADERS := $(addprefix $(includedir)/,$(HEADERS))
endif

ifneq ($(SRCS),)
SRCS 	:= $(addprefix $(langdir)/src/,$(SRCS))
endif

#
# If we are building tests, we derive the C++ sources from the object
# list specified in the C++ Makefile
#
ifneq ($(findstring test/,$(CURDIR)),)
# Given the current directory, compute the path of the test directory
# in the C++ or Objective-C tree
gettestdir	= $(if $(subst $(langsubdir),,$(lastword $1)),$(call gettestdir,$(wordlist 2,$(words $1),x $1))/$(lastword $1),test)
testdir		= $(langdir)/$(call gettestdir,$(subst /, ,$(CURDIR)))

# Derive SRCS from OBJS, and prefix OBJS with OBJDIR
SRCS		:= $(addprefix $(testdir)/,$(subst .o,.$(langext),$(filter-out $(SLICE_OBJS),$(OBJS))))
OBJS		:= $(addprefix $(OBJDIR)/,$(OBJS))

# Derive TEST_SLICE_SRCS from SLICE_OBJS
TEST_SLICE_SRCS += $(addprefix $(testdir)/,$(SLICE_OBJS:.o=.ice))
SRCS    	+= $(patsubst $(testdir)/%.ice,$(OBJDIR)/%.$(langext),$(TEST_SLICE_SRCS))
endif

#
# If SLICE_DIRS is specified, add the $(slicedir)/DIR/*.ice Slice
# files to the SLICE_SRCS variable and compute the derived sources to
# add them to SRCS.
#
ifneq ($(SLICE_DIRS),)
excludeslice = $(EXCLUDE_SLICE_SRCS)
excludeslice := $(addprefix %/,$(excludeslice))
SLICE_SRCS += $(foreach sdir,$(SLICE_DIRS),$(filter-out $(excludeslice),$(wildcard $(slicedir)/$(sdir)/*.ice)))
SRCS += $(patsubst $(slicedir)/%.ice,$(OBJDIR)/%.$(langext),$(SLICE_SRCS))
endif

#
# If PRIVATE_SLICE_SRCS is specified, compute the derived sources to
# add them to SRCS.
#
ifneq ($(PRIVATE_SLICE_SRCS),)
PRIVATE_SLICE_SRCS := $(addprefix $(slicedir)/,$(PRIVATE_SLICE_SRCS))
SRCS += $(patsubst $(slicedir)/%.ice,$(OBJDIR)/%.$(langext),$(PRIVATE_SLICE_SRCS))
endif


#
# If HEADER_DIRS is specified, add the $(langdir)/include/DIR/*.h
# headers to the HEADERS variable (exclude generated headers).
#
ifneq ($(HEADER_DIRS),)
exclude = $(patsubst $(slicedir)/%.ice,%.h,$(SLICE_SRCS) $(PRIVATE_SLICE_SRCS))
exclude := $(addprefix %/,$(exclude))
HEADERS += $(subst $(langdir)/include,$(includedir),$(foreach h,$(HEADER_DIRS),$(filter-out $(exclude),$(wildcard $(langdir)/include/$(h)/*.h))))
endif

#
# If SRC_DIRS is specified, add the $(langdir)/src/DIR/*.[cpp|m|mm]
# source files to the SRCS variable (exclude generated sources).
#
ifneq ($(SRC_DIRS),)
exclude = $(patsubst $(slicedir)/%.ice,%.$(langext),$(SLICE_SRCS) $(PRIVATE_SLICE_SRCS))
exclude += $(EXCLUDE_SRCS)
exclude := $(addprefix %/,$(exclude))
SRCS += $(foreach l,cpp m mm,$(foreach s,$(SRC_DIRS),$(filter-out $(exclude),$(wildcard $(langdir)/src/$(s)/*.$(l)))))
endif

ifneq ($(LOCAL_SRCS),)
SRCS += $(addprefix ./,$(LOCAL_SRCS))
endif

#
# Derive OBJS from SRCS
#
# We remove the source directory prefix and add a unique suffix to
# ensure the object file names are unique. For example, for the
# ../../../../cpp/src/Ice/TcpEndpointI.cpp source file, the object
# file will be $(OBJDIR)/Ice/TcpEndpointI_Ice_cpp.o
#
srcdirs 	= $(langdir)/src . $(OBJDIR) # Directories where sources are located
mkobjname   	= $(OBJDIR)/$(if $(subst ./,,$(dir $1)),$(basename $1)_$(subst /,_,$(dir $1))$(subst .,,$(suffix $1)),$(basename $1)).o
mkobjs		= $(foreach d,$(srcdirs),$(foreach f,$(patsubst $(d)/%,%,$(filter $(d)/%,$1)),$(call mkobjname,$f)))
ifeq ($(OBJS),)
OBJS	 	= $(call mkobjs,$(SRCS))
endif

#
# Compute the suffixes for object names (_Ice_sdk_cpp.o,
# _IceUtil_cpp.o, etc) and create the list of the patterns to use as
# object targets for object implict rules below (e.g.:
# $(OBJDIR)/%_IceUtil_cpp.o $(OBJDIR)/%_Ice_cpp.o ...)
#
unique		= $(if $1,$(firstword $1) $(call unique,$(filter-out $(firstword $1),$1)))
objsuffixes  	= $(call unique,$(foreach f,$(OBJS),$(patsubst $(firstword $(subst _, ,$f))_%,%,$f)))
objpatterns  	= $(foreach s,$(objsuffixes),$(OBJDIR)/%_$(s))

#
# Return a list of patterns matching the given pattern, For
# example calling:
#
#   $(call mkobjtargetpattern,$(OBJDIR)/%_cpp.o)
#
# will return:
#
#   iphoneos/%_IceUtil_cpp.o iphoneos/%_Ice_cpp.o ...
#
mkobjtargetpattern = $(filter $1,$(objpatterns))

#
# Include dependencies for slice files and object files
#
ifneq ($(SLICE_SRCS),)
-include $(addprefix $(dependdir)/, $(notdir $(SLICE_SRCS:.ice=.ice.d)))
endif
ifneq ($(PRIVATE_SLICE_SRCS),)
-include $(addprefix $(dependdir)/, $(notdir $(PRIVATE_SLICE_SRCS:.ice=.ice.d)))
endif
ifneq ($(OBJS),)
-include $(addprefix $(dependdir)/, $(notdir $(OBJS:.o=.d)))
endif

#
# If there's no dependency, make sure that objects depend on all the
# headers and sources.
#
ifneq ($(OBJS),)
ifeq ($(wildcard $(dependdir)/*.d),)
$(OBJS): $(SRCS) $(HEADERS) | $(OBJDIR)
endif
endif

slice2objc = $(call mkslice,$1,$2,$3,$4,$(if $5,$5,$(SLICE2OBJCFLAGS)),$(SLICE2OBJC))
slice2cpp  = $(call mkslice,$1,$2,$3,$4,$(if $5,$5,$(SLICE2CPPFLAGS)),$(SLICE2CPP))

CXX_CPPFLAGS 	= $(CPPFLAGS)
OBJC_CPPFLAGS 	= $(CPPFLAGS)
OBJCXX_CPPFLAGS = $(CXX_CPPFLAGS)

$(TARGETS): | $(HEADERS)

$(libdir)/$(LIBNAME): $(OBJS)
	@$(call mklib,$@,$(OBJS))

$(OBJDIR):
	@mkdir -p $(OBJDIR)

ifneq ($(findstring src/,$(CURDIR)),)
# Generated C++ source
$(call mkobjtargetpattern,$(OBJDIR)/%_cpp.o): $(OBJDIR)/%.cpp
	@$(call mkobj,$<,$@,-I$(OBJDIR)/include $(CXX_CPPFLAGS))

# Generated Objective-C source
$(call mkobjtargetpattern,$(OBJDIR)/%_m.o): $(OBJDIR)/%.m
	@$(call mkobj,$<,$@,-I$(OBJDIR)/include $(OBJC_CPPFLAGS),$(CC))

# C++ source
$(call mkobjtargetpattern,$(OBJDIR)/%_cpp.o): $(cppdir)/src/%.cpp
	@$(call mkobj,$<,$@,-I$(OBJDIR)/include -I$(cppdir)/src $(CXX_CPPFLAGS))

# Objective-C source
$(call mkobjtargetpattern,$(OBJDIR)/%_m.o): $(objcdir)/src/%.m
	@$(call mkobj,$<,$@,-I$(OBJDIR)/include -I$(objcdir)/src $(OBJC_CPPFLAGS),$(CC))

# Objective-C++ source from C++ source directory
$(call mkobjtargetpattern,$(OBJDIR)/%_mm.o): $(cppdir)/src/%.mm
	@$(call mkobj,$<,$@,-I$(OBJDIR)/include -I$(cppdir)/src $(OBJCXX_CPPFLAGS))

# Compile public Slice files from slice directory to C++
$(includedir)/%.h $(OBJDIR)/%.cpp: $(slicedir)/%.ice $(SLICE2CPP)
	@$(call slice2cpp,$<,$(*F),$(includedir)/$(*D),$(OBJDIR)/$(*D),--include-dir $(*D) $(SLICE2CPPFLAGS))

# Compile private Slice files from slice directory to C++
$(OBJDIR)/include/%.h $(OBJDIR)/%.cpp: $(slicedir)/%.ice $(SLICE2CPP)
	@$(call slice2cpp,$<,$(*F),$(OBJDIR)/include/$(*D),$(OBJDIR)/$(*D),--include-dir $(*D) $(SLICE2CPPFLAGS))

# Compile public Slice files from slice directory to Objective-C
$(includedir)/objc/%.h $(OBJDIR)/%.m: $(slicedir)/%.ice $(SLICE2OBJC)
	@$(call slice2objc,$<,$(*F),$(includedir)/objc/$(*D),$(OBJDIR)/$(*D),--include-dir objc/$(*D) $(SLICE2OBJCFLAGS))

# Copy headers from $(langdir)/include to the SDK include directory
ifneq ($(includedir),$(langdir)/include)
$(includedir)/%.h: $(langdir)/include/%.h
	@$(call mkheader,$<,$@)
endif
endif

#
# Rules for building C++ tests (executables for OS X, bundles for iOS)
#
ifneq ($(findstring test/,$(CURDIR)),)

ifneq ($(PLATFORM_NAME),macosx)

mktestname2	= $(if $(subst $(langsubdir),,$(lastword $1)),$(call mktestname2,$(wordlist 2,$(words $1),x $1),$(lastword $1)_$2),$(top_srcdir)/test/cpp/iPhone/container/Bundles-$(OBJDIR)/$2.bundle/lib$2.dylib)
mktestname 	= $(call mktestname2,$(subst /, ,$(CURDIR)),$(1))
mktest 	   	= bundledir=$(dir $(1)); libname=$(notdir $(basename $(1))); \
		  if test ! -f $$bundledir/Info.plist ; \
		  then \
		     mkdir -p $$bundledir ; \
		     sed "s/NAME/$$libname/" $(top_srcdir)/test/cpp/iPhone/container/BundleInfo.plist > \
					     $$bundledir/Info.plist ; \
		  fi ;\
	          $(CXX) -bundle $(LDFLAGS) $(ARCHFLAGS) -L$(OBJDIR) -L$(libdir) -o $(1) $(2) $(3)
else

mktestname	= $(1)
mktest 	  	= $(CXX) -L$(OBJDIR) $(LDFLAGS) -o $(@) $(2) $(3)

endif

COBJS 		:= $(if $(COBJS),$(addprefix $(OBJDIR)/, $(COBJS)))
SOBJS 		:= $(if $(SOBJS),$(addprefix $(OBJDIR)/, $(SOBJS)))
SAMDOBJS	:= $(if $(SAMDOBJS),$(addprefix $(OBJDIR)/, $(SAMDOBJS)))
COLOBJS 	:= $(if $(COLOBJS),$(addprefix $(OBJDIR)/, $(COLOBJS)))
SLICE_OBJS 	:= $(if $(SLICE_OBJS),$(addprefix $(OBJDIR)/, $(SLICE_OBJS)))

ICECPPFLAGS	:= -I$(testdir) $(ICECPPFLAGS)

TESTLIBNAME	:= $(if $(TESTLIBNAME),$(addprefix $(OBJDIR)/,$(TESTLIBNAME)))

#
# It's important that the two following rules appear first, otherwise
# we could endup compiling generated sources from the test directory
# instead of compiling the source from $(OBJDIR).
#
ifeq ($(ice_language),cpp)

CPPFLAGS 	:= -I$(OBJDIR)/include -I$(langdir)/test/include -I$(testdir) $(CPPFLAGS)

%.o: %.cpp
	@$(call mkobj,$<,$@,$(CXX_CPPFLAGS))

$(OBJDIR)/%.o: $(testdir)/%.cpp
	@$(call mkobj,$<,$@,$(CXX_CPPFLAGS))

$(OBJDIR)/include/%.h $(OBJDIR)/%.cpp: $(testdir)/%.ice $(SLICE2CPP)
	@$(call slice2cpp,$<,$(*F),$(OBJDIR)/include,$(OBJDIR),$(SLICE2CPPFLAGS))
else

CPPFLAGS 	:= -I$(OBJDIR)/include -I$(langdir)/test/include -I$(langdir)/test/Ice $(CPPFLAGS)

%.o: %.m
	@$(call mkobj,$<,$@,$(OBJC_CPPFLAGS))

$(OBJDIR)/%.o: $(testdir)/%.m
	@$(call mkobj,$<,$@,$(OBJC_CPPFLAGS))

$(OBJDIR)/include/%.h $(OBJDIR)/%.m: $(testdir)/%.ice $(SLICE2OBJC)
	@$(call slice2objc,$<,$(*F),$(OBJDIR)/include,$(OBJDIR),$(SLICE2OBJCFLAGS))
endif

# Make sure the tests executables depend on the SDK static library.
$(TARGETS):	$(libdir)/$(call mklibname,$(if $(ice_language:cpp=),IceObjC,Ice))

endif

ifneq ($(TARGETS),)
install all:: $(TARGETS)

clean::
	-rm -f $(TARGETS)
endif

clean::
	-rm -rf $(OBJDIR)

install::
